---
# ssh_client_hardening_playbook.yml
# Playbook to harden SSH client configuration based on SSH Audit results
# With conditional handling for macOS, Amazon Linux 2023, and RHEL 8

- name: SSH Client Hardening
  hosts: all
  become: yes  # Use sudo for system-wide configuration
  gather_facts: yes  # Needed to get OS information
  vars:
    # Configuration settings based on OS type
    ssh_client_config_file: "{{ 
      '/etc/ssh/ssh_config' if (ansible_os_family == 'RedHat' or ansible_os_family == 'Amazon') 
      else '/etc/ssh/ssh_config' if ansible_os_family == 'Debian' 
      else '/etc/ssh/ssh_config' if ansible_os_family == 'Darwin' 
      else '/etc/ssh/ssh_config' 
    }}"
    # Backup directory
    backup_dir: "{{ 
      '/etc/ssh/backups' if (ansible_os_family == 'RedHat' or ansible_os_family == 'Amazon')
      else '/etc/ssh/backups' if ansible_os_family == 'Debian'
      else '/private/etc/ssh/backups' if ansible_os_family == 'Darwin'
      else '/etc/ssh/backups'
    }}"
    # SSH config.d directory
    ssh_config_d_dir: "{{
      '/etc/ssh/ssh_config.d' if (ansible_os_family == 'RedHat' or ansible_os_family == 'Amazon' or ansible_os_family == 'Debian')
      else '/private/etc/ssh/ssh_config.d' if ansible_os_family == 'Darwin'
      else '/etc/ssh/ssh_config.d'
    }}"

    # Define the secure host key algorithms
    host_key_algorithms:
      - ssh-ed25519-cert-v01@openssh.com
      - rsa-sha2-512-cert-v01@openssh.com
      - rsa-sha2-256-cert-v01@openssh.com
      - ssh-ed25519
      - rsa-sha2-512
      - rsa-sha2-256

    # Define secure key exchange algorithms
    kex_algorithms:
      - curve25519-sha256
      - curve25519-sha256@libssh.org
      - diffie-hellman-group-exchange-sha256
      - diffie-hellman-group16-sha512
      - diffie-hellman-group18-sha512

    # Define secure ciphers
    ciphers:
      - chacha20-poly1305@openssh.com
      - aes256-gcm@openssh.com
      - aes128-gcm@openssh.com
      - aes256-ctr
      - aes192-ctr
      - aes128-ctr

    # Define secure MACs
    macs:
      - hmac-sha2-512-etm@openssh.com
      - hmac-sha2-256-etm@openssh.com
      - umac-128-etm@openssh.com

  tasks:
    - name: Set OS type facts
      set_fact:
        is_macos: "{{ ansible_os_family == 'Darwin' }}"
        is_rhel8: "{{ ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8' }}"
        is_al2023: "{{ ansible_os_family == 'Amazon' and ansible_distribution_major_version == '2023' }}"
      
    - name: Display OS information
      debug:
        msg: >
          Operating system: {{ ansible_distribution }} {{ ansible_distribution_version }} 
          ({{ ansible_os_family }}), 
          SSH config file: {{ ssh_client_config_file }}

    - name: Create backup directory if it doesn't exist
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      register: backup_dir_result
      ignore_errors: yes

    - name: Create backup directory with sudo (macOS)
      command: "sudo mkdir -p {{ backup_dir }}"
      when: is_macos
      changed_when: true
      ignore_errors: yes

    - name: Set permissions for backup directory (macOS)
      command: "sudo chmod 755 {{ backup_dir }}"
      when: is_macos
      changed_when: true
      ignore_errors: yes

    - name: Backup original SSH client config
      copy:
        src: "{{ ssh_client_config_file }}"
        dest: "{{ backup_dir }}/ssh_config.backup.{{ ansible_date_time.date }}"
        remote_src: yes
      ignore_errors: yes
      register: backup_result

    - name: Backup SSH client config using sudo (macOS)
      command: "sudo cp {{ ssh_client_config_file }} {{ backup_dir }}/ssh_config.backup.{{ ansible_date_time.date }}"
      when: is_macos and backup_result is failed
      changed_when: true
      ignore_errors: yes

    # Configure system-wide SSH client settings
    - name: Create ssh_config.d directory if it doesn't exist
      file:
        path: "{{ ssh_config_d_dir }}"
        state: directory
        mode: '0755'
      register: config_d_result
      ignore_errors: yes

    - name: Create ssh_config.d directory with sudo (macOS)
      command: "sudo mkdir -p {{ ssh_config_d_dir }}"
      when: is_macos and config_d_result is failed
      changed_when: true

    - name: Set permissions for ssh_config.d directory (macOS)
      command: "sudo chmod 755 {{ ssh_config_d_dir }}"
      when: is_macos and config_d_result is failed
      changed_when: true

    # Create OS-specific configurations
    - name: Create hardened SSH client config (Linux - RHEL 8 and AL2023)
      copy:
        dest: "{{ ssh_config_d_dir }}/10-hardened.conf"
        content: |
          # Hardened SSH Client Configuration
          # Generated by Ansible on {{ ansible_date_time.date }}
          # OS: {{ ansible_distribution }} {{ ansible_distribution_version }}

          # Define host key algorithms to accept (removing NIST P-curves)
          HostKeyAlgorithms {{ host_key_algorithms | join(",") }}

          # Define key exchange algorithms (removing weak DH and NIST P-curves)
          KexAlgorithms {{ kex_algorithms | join(",") }}

          # Define encryption ciphers
          Ciphers {{ ciphers | join(",") }}

          # Define MAC algorithms (removing weak ones)
          MACs {{ macs | join(",") }}

          # Additional security settings
          HashKnownHosts yes
          VisualHostKey yes
          VerifyHostKeyDNS yes
          StrictHostKeyChecking ask
          UpdateHostKeys yes
          
          # Define connection security
          ConnectTimeout 30
          ConnectionAttempts 2
          ServerAliveInterval 60
          ServerAliveCountMax 3
          
          # RHEL/AL2023 specific settings
          {{ 'RekeyLimit default 1h' if (is_rhel8 or is_al2023) else '' }}
        mode: '0644'
      when: not is_macos
      register: linux_config_result
      ignore_errors: yes

    - name: Create hardened SSH client config (macOS)
      copy:
        dest: "/private/etc/ssh/ssh_config.d/10-hardened.conf"
        content: |
          # Hardened SSH Client Configuration
          # Generated by Ansible on {{ ansible_date_time.date }}
          # OS: macOS

          # Define host key algorithms to accept (removing NIST P-curves)
          HostKeyAlgorithms {{ host_key_algorithms | join(",") }}

          # Define key exchange algorithms (removing weak DH and NIST P-curves)
          KexAlgorithms {{ kex_algorithms | join(",") }}

          # Define encryption ciphers
          Ciphers {{ ciphers | join(",") }}

          # Define MAC algorithms (removing weak ones)
          MACs {{ macs | join(",") }}

          # Additional security settings
          HashKnownHosts yes
          VisualHostKey yes
          StrictHostKeyChecking ask
          UpdateHostKeys yes
          
          # Define connection security
          ConnectTimeout 30
          ConnectionAttempts 2
          ServerAliveInterval 60
          ServerAliveCountMax 3
          
          # macOS specific settings
          UseKeychain yes
          AddKeysToAgent yes
        mode: '0644'
      when: is_macos
      ignore_errors: yes
      register: macos_config_result

    - name: Create hardened SSH client config using sudo (macOS)
      shell: |
        cat << 'EOF' | sudo tee /private/etc/ssh/ssh_config.d/10-hardened.conf
        # Hardened SSH Client Configuration
        # Generated by Ansible on {{ ansible_date_time.date }}
        # OS: macOS

        # Define host key algorithms to accept (removing NIST P-curves)
        HostKeyAlgorithms {{ host_key_algorithms | join(",") }}

        # Define key exchange algorithms (removing weak DH and NIST P-curves)
        KexAlgorithms {{ kex_algorithms | join(",") }}

        # Define encryption ciphers
        Ciphers {{ ciphers | join(",") }}

        # Define MAC algorithms (removing weak ones)
        MACs {{ macs | join(",") }}

        # Additional security settings
        HashKnownHosts yes
        VisualHostKey yes
        StrictHostKeyChecking ask
        UpdateHostKeys yes
        
        # Define connection security
        ConnectTimeout 30
        ConnectionAttempts 2
        ServerAliveInterval 60
        ServerAliveCountMax 3
        
        # macOS specific settings
        UseKeychain yes
        AddKeysToAgent yes
        EOF
        sudo chmod 644 /private/etc/ssh/ssh_config.d/10-hardened.conf
      when: is_macos and macos_config_result is failed
      changed_when: true

    # Configure user SSH client settings for current and future users (Linux)
    - name: Create default user SSH directory (Linux)
      file:
        path: /etc/skel/.ssh
        state: directory
        mode: '0700'
      when: not is_macos

    - name: Create default user SSH client config (Linux)
      copy:
        dest: /etc/skel/.ssh/config
        content: |
          # Hardened SSH Client Configuration
          # Generated by Ansible on {{ ansible_date_time.date }}
          
          # Include system-wide configuration
          Include {{ ssh_config_d_dir }}/*.conf
          
          # User-specific additions can be placed here
        mode: '0600'
      when: not is_macos

    # Update current Linux user SSH configs
    - name: Find all user home directories (Linux)
      find:
        paths: /home
        file_type: directory
        recurse: no
      register: home_dirs
      when: not is_macos

    # Get stat information about home directories to preserve group ownership
    - name: Get home directory stats (Linux)
      stat:
        path: "{{ item.path }}"
      register: home_dir_stats
      with_items: "{{ home_dirs.files | default([]) }}"
      when: not is_macos and item.path | basename != 'lost+found'

    - name: Ensure .ssh directories exist for users (Linux)
      file:
        path: "{{ item.item.path }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ item.item.path | basename }}"
        group: "{{ item.stat.gr_name | default('root') }}"
      with_items: "{{ home_dir_stats.results | default([]) | selectattr('stat', 'defined') | list }}"
      when: not is_macos and item.item.path | basename != 'lost+found'
      ignore_errors: yes

    - name: Create/update user SSH client configs (Linux)
      blockinfile:
        path: "{{ item.item.path }}/.ssh/config"
        create: yes
        mode: '0600'
        owner: "{{ item.item.path | basename }}"
        group: "{{ item.stat.gr_name | default('root') }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SSH HARDENING"
        block: |
          # Include system-wide configuration
          Include {{ ssh_config_d_dir }}/*.conf
          
          # User-specific security settings
          HashKnownHosts yes
          VisualHostKey yes
          StrictHostKeyChecking ask
          UpdateHostKeys yes
          
          # Distribution specific settings
          {{ 'RekeyLimit default 1h' if (is_rhel8 or is_al2023) else '' }}
      with_items: "{{ home_dir_stats.results | default([]) | selectattr('stat', 'defined') | list }}"
      when: not is_macos and item.item.path | basename != 'lost+found'

    # macOS specific user configurations - IMPROVED WITH REAL USER FILTERING
    - name: Find all user home directories (macOS)
      shell: |
        dscl . -list /Users NFSHomeDirectory | \
        grep -v '^_' | \
        grep '/Users/' | \
        grep -v '/var/empty' | \
        awk '{print $2}' | \
        grep -v '^/Users/Shared' | \
        grep -v '^/Users/Guest'
      register: macos_home_dirs
      when: is_macos
      changed_when: false

    - name: Parse macOS home directories
      set_fact:
        macos_user_homes: "{{ macos_home_dirs.stdout_lines | default([]) }}"
      when: is_macos and macos_home_dirs.stdout is defined

    - name: Ensure .ssh directories exist for macOS users
      file:
        path: "{{ item }}/.ssh"
        state: directory
        mode: '0700'
      with_items: "{{ macos_user_homes | default([]) }}"
      when: is_macos
      ignore_errors: yes

    - name: Create/update macOS user SSH client configs
      blockinfile:
        path: "{{ item }}/.ssh/config"
        create: yes
        mode: '0600'
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SSH HARDENING"
        block: |
          # Include system-wide configuration
          Include {{ ssh_config_d_dir }}/*.conf
          
          # User-specific security settings
          HashKnownHosts yes
          VisualHostKey yes
          StrictHostKeyChecking ask
          UpdateHostKeys yes
          
          # macOS specific settings
          UseKeychain yes
          AddKeysToAgent yes
      with_items: "{{ macos_user_homes | default([]) }}"
      when: is_macos
      ignore_errors: yes

    # Verify configuration
    - name: Verify SSH client configuration file validity (with -G test to a known host)
      command: ssh -G github.com
      register: ssh_config_check
      ignore_errors: yes
      changed_when: false
      check_mode: no

    - name: Display SSH client config check result
      debug:
        var: ssh_config_check
      when: ssh_config_check is defined

    # OS-specific post-verification tasks
    - name: Verify OpenSSH version (Linux)
      command: ssh -V
      register: ssh_version_check
      changed_when: false
      when: not is_macos

    - name: Verify OpenSSH version (macOS)
      command: ssh -V
      register: macos_ssh_version_check
      changed_when: false
      when: is_macos

    - name: Display SSH version
      debug:
        var: ssh_version_check.stderr if not is_macos else macos_ssh_version_check.stderr

    - name: Summary of actions
      debug:
        msg: |
          SSH client hardening completed for {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          OS type: {{ "macOS" if is_macos else "RHEL 8" if is_rhel8 else "Amazon Linux 2023" if is_al2023 else "Other Linux" }}
          SSH config file: {{ ssh_client_config_file }}
          Configuration directory: {{ ssh_config_d_dir }}
          
          Verification results:
          {{ "✓ Configuration valid" if (ssh_config_check.rc | default(1) == 0) else "⚠️ Configuration check returned non-zero exit code" }}
          
          Remember to test SSH connections to your most important servers before logging out!